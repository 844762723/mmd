<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mmt.dao.BookDao">
    <insert id="insertBookFee">
        INSERT INTO payment(bid, state, curphase, money, totalmoney,expectfee, date, crtdate, crtuser, recsts)
        VALUES
        <foreach collection="payments" item="payment" separator=",">
            (#{payment.bid},#{payment.state},  #{payment.curphase}, #{payment.money}, #{payment.money},'0', #{payment.date}, now(), #{payment.crtuser}, '1')
        </foreach>
    </insert>

    <update id="passAudit">
        update cus_book set state = '6', audit_state = '3', audituser = #{user_no}, auditdate = now() where bid = #{id}
    </update>

    <update id="unPassAudit">
        update cus_book set state = '5', audit_state = '2', unpassaudit_memo = #{unpassaudit_memo}, audituser = #{audituser}, auditdate = now() where bid = #{bid}
    </update>

    <update id="backUpdate">
        update cus_book set state = '7', audit_state = '4', updmemo = #{updmemo}, audituser = #{audituser},
        auditdate = now(), upditem = #{updItem} where bid = #{bid}
    </update>

    <update id="passReAudit">
        update cus_book set state = '1', audit_state = '5', audituser = #{user_no}, repaytotal = #{price},
         auditdate = now(), repaydate = #{expectDate}, startdate = now() where bid = #{id}
    </update>

    <update id="unPassReAudit" parameterType="book">
        update cus_book set state = '5', audit_state = '2', unpassaudit_memo = #{unpassaudit_memo}, reaudituser = #{reaudituser}, reauditdate = now() where bid = #{bid}
    </update>

    <update id="backReUpdate" parameterType="book">
        update cus_book set state = '7', audit_state = '6', updmemo = #{updmemo}, audituser = #{audituser}, auditdate = now() where bid = #{bid}
    </update>
    <update id="updCusLink" parameterType="cusLink">
        update cus_link set lname  = #{lname}, lsex = #{lsex}, lrelation = #{lrelation}, lphone = #{lphone},
        lmemo = #{lmemo}, upduser = #{upduser}, upddate = now() where #{lid} = #{lid}
    </update>

    <update id="updateBook" parameterType="book">
        update cus_book set name = #{name}, phone = #{phone}, sex = #{sex}, birth = #{birth}, ethnic = #{ethnic},
         identity = #{identity}, place = #{place}, familyphone = #{familyphone}, koseki = #{koseki}, nowaddress = #{nowaddress},
         company = #{company}, income = #{income}, consume = #{consume}, weixin = #{weixin}, phoneserviceno = #{phoneserviceno},
         qq = #{qq}, email = #{email}, memo = #{memo}, bankcard = #{bankcard}, bankaddress = #{bankaddress}, family_linkone = #{family_linkone},
         family_linkone_sex = #{family_linkone_sex}, family_linkone_relation = #{family_linkone_relation},family_linkone_phone = #{family_linkone_phone},
         family_linkone_address = #{family_linkone_address}, family_linktwo = #{family_linktwo}, family_linktwo_sex = #{family_linktwo_sex},
         family_linktwo_relation = #{family_linktwo_relation}, family_linktwo_phone = #{family_linktwo_phone},
         family_linktwo_address = #{family_linktwo_address}, link_ids = #{link_ids}, product_name = #{product_name}, product_imei = #{product_imei},
         product_price = #{product_price}, leaseterm = #{leaseterm}, despositrate = #{despositrate}, desposit = #{desposit},
         monthrentrate = #{monthrentrate}, monthrent = #{monthrent}, accessory_id = #{accessory_id}, agency_id = #{agency_id},
         taobao_loginno = #{taobao_loginno}, taobao_password = #{taobao_password}, zhifubao_loginno = #{zhifubao_loginno},
         zhifubao_password = #{zhifubao_password}, xuexin_loginno = #{xuexin_loginno}, xuexin_password = #{xuexin_password},
         expectfee = #{expectfee}   where bid = #{bid}
    </update>

    <update id="delBook">
        update cus_book set recsts = 'D' where bid in <foreach collection="ids" item="id" open="(" close=")">#{id}</foreach>
    </update>

    <update id="finishBook">
        update cus_book set state = '3', settleuser = #{user_no}, settledate = now() where bid = #{bid}
    </update>

    <update id="updBookPact" parameterType="book">
        update cus_book set submitpact = #{submitpact} where bid = #{bid}
    </update>

    <update id="setBookOverdueFee" parameterType="book">
        update cus_book set expectfee = #{expectfee}, totalexpectfee = #{totalexpectfee},
        state = '2', syncdate = #{syncdate}, repaytotal = #{repaytotal} where bid = #{bid}
    </update>

    <update id="setBookRent" parameterType="book">
        update cus_book set expectfee = #{expectfee}, totalexpectfee = #{totalexpectfee}, book_type = '1',
         state = '2', syncdate = #{syncdate}, repaytotal = #{repaytotal} where bid = #{bid}
    </update>

    <update id="updateRaymentFee" parameterType="payment">
        update payment set state = '3', totalmoney = #{totalmoney}, expectfee = #{expectfee}  where pid = #{pid}
    </update>

    <update id="finishPamentFee">
        update payment set state = '1', finishuser = #{user_no}, realydate = now(), finishdate = now() where pid = #{pid}
    </update>

    <update id="finishBookFee">
        update cus_book set expectfee = '0', state = '3', reimbursement = CAST(IFNULL(reimbursement, 0) AS DECIMAL) + CAST(IFNULL(repaytotal, 0) AS DECIMAL),
        repaytotal = '0' where bid = #{bid}
    </update>

    <update id="updBookByFee">
        update cus_book set expectfee = '0', state = '1', reimbursement = CAST(IFNULL(reimbursement, 0) AS DECIMAL) + CAST(IFNULL(repaytotal, 0) AS DECIMAL),
         repaytotal = monthrent, repaylssue = (CAST(IFNULL(repaylssue, 0) AS DECIMAL) + 1),
          repaydate = DATE_ADD(repaydate, INTERVAL 7 DAY)  where bid = #{bid}
    </update>

    <update id="setPaymentState">
        update payment set state = '2' where bid = #{bid} and curphase = #{lssue}
    </update>

    <update id="updImeiInfo" parameterType="payment">
        update imei set imei_no = #{imei_no}, product_name = #{product_name} where imei_id = #{imei_id}
    </update>

    <update id="updateImeiState">
        update imei set state = '2' where imei_no in <foreach collection="nos" item="no" open="(" close=")" separator=",">#{no}</foreach>
    </update>

    <update id="updateImeiInfo" parameterType="iemi_turnover">
        update iemi_turnover set imei_nos = #{imei_nos}, agency_id = #{agency_id}, product_name = #{product_name} where id = #{id}
    </update>

    <update id="delInImeiInfo">
        update iemi_turnover set recsts = 'D' where id in <foreach collection="ids" item="id" open="(" close=")" separator=",">#{id}</foreach>
    </update>

    <update id="delImeis">
        update imei set recsts = 'D' where
        (select CONCAT(',', GROUP_CONCAT(imei_nos SEPARATOR ','), ',')  from iemi_turnover
        where id in <foreach collection="ids" item="id" open="(" close=")" separator=",">#{id}</foreach>)
        like CONCAT('%,', imei_no, ',%')
    </update>

    <update id="saveInImeiInfo" parameterType="iemi_turnover">
        INSERT INTO iemi_turnover(type, product_name, imei_nos, crtuser, crtdate)
        VALUES ('1', #{product_name}, #{imei_nos}, #{crtuser}, now())
    </update>

    <update id="updateInImeiInfo" parameterType="iemi_turnover">
        update iemi_turnover set imei_nos = #{imei_nos},  product_name = #{product_name} where id = #{id}
    </update>

    <update id="updateFeeWithSms">
        update payment set issms = '1' where bid = #{bid} and date = DATE_SUB(CURDATE(), INTERVAL -1 DAY)
    </update>

    <delete id="delImeiInfo" >
        delete from imei where imei_id = #{id}
    </delete>

    <select id="getAuditBookList" resultType="book">
        select bid,(select aname from agency a where a.aid = agency_id) agency_name,product_name, product_price, leaseterm, product_imei,monthrent,
        (select city from bs_city b where b.id =  (select agency_city from agency a where a.aid = agency_id)) agency_city,
        state, (select b.data_name from bs_basedict b where b.dict_code = 'DD001' and b.data_code = state) state_name,
        audit_state, (select b.data_name from bs_basedict b where b.dict_code = 'DD002' and b.data_code = audit_state) audit_state_name,
        type, name, phone, book_no, sex, birth, ethnic, `identity`, place,repaylssue,
        familyphone, koseki, nowaddress, weixin, phoneserviceno, qq, email, memo, bankcard, bankaddress,
        (select count(*) from cus_book c1 where c1.recsts = '1' and c1.bid != c.bid and  c1.identity = c.identity and c1.state !='4' and c1.state != '6' and c1.state != '7') history_count
        from cus_book c where recsts = '1' and state = '4'
        <if test="book_no != null and book_no != ''">
            and book_no = #{book_no}
        </if>
        <if test="phone != null and phone != ''">
            and phone = #{phone}
        </if>
        <if test="audit_state != null and audit_state != ''">
            and audit_state = #{audit_state}
        </if>
        <if test="agency_id != null  and agency_id != ''">
            and agency_id = #{agency_id}
        </if>
        <include refid="userRule"></include>
    </select>

    <select id="getBookDetail" resultType="book" resultMap="bookInfo">
        select b.bid, b.type, b.name, b.phone, b.book_no, b.sex, b.birth, b.ethnic, b.identity, b.place, b.familyphone,
        b.koseki, b.nowaddress, b.company, b.income, b.consume, b.weixin, b.qq, b.phoneserviceno, b.email,b.accessory_id, b.agency_id,
        b.memo, b.bankcard, b.bankaddress, b.family_linkone, b.family_linkone_address, b.family_linkone_phone,
        b.family_linkone_relation, b.family_linkone_sex, b.family_linktwo, b.family_linktwo_address,
        b.family_linktwo_phone, b.family_linktwo_relation, b.family_linktwo_sex, b.product_name, b.product_imei,
        b.product_price, b.leaseterm, b.desposit, b.despositrate, b.monthrent, b.monthrentrate,
        b.repaytotal, b.totalexpectfee, b.reimbursement,b.startdate,
        b.taobao_loginno, b.taobao_password, b.zhifubao_loginno, b.zhifubao_password, b.xuexin_loginno, b.xuexin_password,
        b.audit_state, (select data_name from bs_basedict bd where bd.dict_code = 'DD002' and bd.data_id = b.audit_state) audit_state_name,
        b.state, (select data_name from bs_basedict bd where bd.dict_code = 'DD001' and bd.data_id = b.state) state_name,
        b.repaydate, b.expectfee, b.repaylssue, a.yid, a.identity_front, a.identity_reverse, a.identity_inhand, a.work_card,
        a.student_card, a.staff_photo, a.bank_card, a.taobao_address, a.zhifb_zmf, a.imei, a.contract_photo,
        a.operation_video, a.memo_one, a.memo_two, l.lid, l.lname, l.lsex, l.lrelation, l.lphone, l.lmemo
        from cus_book b left join accessory a on b.accessory_id = a.yid
        left join cus_link l on concat(',', b.link_ids, ',') like concat('%,', l.lid, ',%')
        <where>
            b.recsts = '1' and bid = #{id}  <include refid="userRule"></include>
        </where>
    </select>

    <select id="getBookList" resultType="book" parameterType="book">
        select bid, book_type, (select aname from agency a where a.aid = agency_id) agency_name,product_name, product_price, leaseterm, product_imei,monthrent,
        (select city from bs_city b where b.id =  (select agency_city from agency a where a.aid = agency_id)) agency_city,
        audit_state, (select data_name from bs_basedict bd where bd.dict_code = 'DD002' and bd.data_id = audit_state) audit_state_name,
        state, (select data_name from bs_basedict bd where bd.dict_code = 'DD001' and bd.data_id = state) state_name,
        type, name, phone, book_no, sex, birth, ethnic, `identity`, place, submitpact, repaylssue,repaydate,
        audituser, auditdate, reaudituser, reauditdate,
        familyphone, koseki, nowaddress, weixin, phoneserviceno, qq, email, memo, bankcard, bankaddress
        from cus_book where recsts = '1'
        <if test="book_no != null and book_no != ''">
            and book_no = #{book_no}
        </if>
        <if test="phone != null  and phone != ''">
            and phone = #{phone}
        </if>
        <if test="agency_id != null and agency_id != ''">
            and agency_id = #{agency_id}
        </if>
        <if test="oper != null and oper == 'history'">
            and bid != #{bid} and identity = (select identity from cus_book where bid = #{bid})
        </if>
        <include refid="userRule"></include>
    </select>

    <select id="getBookFeeById" resultType="book">
        SELECT monthrent, leaseterm, bid from cus_book where bid = #{id}
    </select>
    <select id="isImei" resultType="int">
        SELECT count(*) from imei where imei_no = #{imei}
    </select>
    <select id="updateAccessory" parameterType="accessory">
        update accessory set upduser = #{upduser}, upddate = now()
        <if test="identity_front != null  and identity_front !=''">
            , identity_front = #{identity_front}
        </if>
        <if test="identity_reverse != null  and identity_reverse != ''">
            , identity_reverse = #{identity_reverse}
        </if>
        <if test="identity_inhand != null and identity_inhand != ''">
            , identity_inhand = #{identity_inhand}
        </if>
        <if test="work_card != null and work_card != ''">
            , work_card = #{work_card}
        </if>
        <if test="student_card != null  and student_card != ''">
            , student_card = #{student_card}
        </if>
        <if test="staff_photo != null  and staff_photo != ''">
            , staff_photo = #{staff_photo}
        </if>
        <if test="bank_card != null  and bank_card != ''">
            , bank_card = #{bank_card}
        </if>
        <if test="taobao_address != null  and taobao_address != ''">
            , taobao_address =#{taobao_address}
        </if>
        <if test="zhifb_zmf != null  and zhifb_zmf != ''">
            , zhifb_zmf =#{zhifb_zmf}
        </if>
        <if test="imei != null  and imei != ''">
            , imei = #{imei}
        </if>
        <if test="contract_photo != null  and contract_photo != ''">
            , contract_photo = #{contract_photo}
        </if>
        <if test="operation_video != null  and operation_video != ''">
            , operation_video = #{operation_video}
        </if>
        <if test="memo_one != null and memo_one != ''">
            , memo_one = #{memo_one}
        </if>
        <if test="memo_two != null  and memo_two != ''">
            , memo_two = #{memo_two}
        </if>
        where yid = #{yid}
    </select>
    <select id="getMaxBookNo" resultType="_long">
        SELECT max(bid) from cus_book
    </select>
    <select id="queryRepay" resultType="payment">
        select * from payment where bid = #{bid} and state = '1' order by crtdate DESC
    </select>
    <select id="queryBookWithPaid" resultType="book">
        select bid, book_no, book_type, product_price, leaseterm, monthrent, repaydate, totalexpectfee, syncdate, expectFee, repaytotal
        from cus_book where recsts = '1' and (state = '1' or state = '2')
    </select>
    <select id="getoverDueBookList" resultType="book" parameterType="book">
        select bid,(select aname from agency a where a.aid = agency_id) agency_name,product_name, product_price, leaseterm, product_imei,monthrent,
        (select city from bs_city b where b.id =  (select agency_city from agency a where a.aid = agency_id)) agency_city,
        audit_state, (select data_name from bs_basedict bd where bd.dict_code = 'DD002' and bd.data_id = audit_state) audit_state_name,
        state, (select data_name from bs_basedict bd where bd.dict_code = 'DD001' and bd.data_id = state) state_name,
        book_type, repaydate, repaytotal, totalexpectfee, expectfee, repaylssue, reimbursement,
        type, name, phone, book_no, sex, birth, ethnic, `identity`, place, submitpact, repaylssue,repaydate,
        familyphone, koseki, nowaddress, weixin, phoneserviceno, qq, email, memo, startdate,
        family_linkone, family_linkone_sex, family_linkone_relation, family_linkone_phone, family_linkone_address,
        family_linktwo, family_linktwo_sex, family_linktwo_relation, family_linktwo_phone, family_linktwo_address
        from cus_book where recsts = '1' and (state = '2' or state = '1')
        <if test="book_no != null and book_no != ''">
            and book_no = #{book_no}
        </if>
        <if test="phone != null  and phone != ''">
            and phone = #{phone}
        </if>
        <if test="agency_id != null and agency_id != ''">
            and agency_id = #{agency_id}
        </if>
        <include refid="userRule"></include>
    </select>

    <sql id="userRule">
        <if test="user.post_id == '1' or user.post_id == '2'">
            and 1 = 1
        </if>
        <if test="user.post_id == '3' or user.post_id == null or user.post_id == ''">
            and concat(',', #{user.agency_ids}, ',') like concat('%,', agency_id, ',%')
        </if>
    </sql>

    <select id="getCurrRepayByBook" resultType="payment">
        SELECT * from payment where bid = #{bid} and date = #{repaydate}
    </select>

    <select id="queryRepayByBid" resultType="payment">
        select * from payment where bid = #{bid} order by curphase
    </select>
    <select id="queryBookStateWithBid" resultType="book">
        select book_type from cus_book where bid = #{bid}
    </select>
    <select id="getPayment" resultType="payment">
        select MAX(curphase) curphase FROM payment where bid = #{bid}
    </select>
    <select id="getBookRepaylssue" resultType="book">
        select bid, repaylssue from cus_book where bid = #{bid}
    </select>
    <select id="getTest1" resultType="map">
        select * from test where bid = '1'
    </select>
    <select id="getImeiInfo" resultType="iemi">
        SELECT imei_id, imei_no, i.state, i.product_name, b.name cus_name, b.identity cus_identity,
        (select a.aname from agency a where a.aid = i.agency_id) agency_name,
        (select a.agency_city from agency a where a.aid = i.agency_id) agency_city,
        i.outdate,
        i.crtuser, i.crtdate from imei i left join cus_book b on i.imei_no = b.product_imei
        <where>
            i.recsts = '1'
            <if test="imei_no != null and imei_no != ''">
                and imei_no like concat('%', #{imei_no}, '%')
            </if>
            <if test="agency_id != null  and agency_id != ''">
                and i.agency_id = #{agency_id}
            </if>
            <if test="cus_name != null  and cus_name != ''">
                and b.name like concat('%', #{cus_name}, '%')
            </if>
        </where>
    </select>

    <select id="hasNotRayFee" resultType="int">
        select count(*) from payment where bid = #{bid} and (state = '2' or state = '3')
        and curphase &lt; (select curphase from payment where pid = #{pid})
    </select>
    <select id="getBookState" resultType="book">
        select state from cus_book where bid = #{id}
    </select>

    <select id="getOutImeiInfo" resultType="iemi_turnover">
        select id, type, product_name, imei_nos, agency_id, (select aname from agency a where a.aid = agency_id) agency_name,
        (select city from bs_city where id = (select agency_city from agency a where a.aid = agency_id)) agency_city,
        crtuser, crtdate  from iemi_turnover
        <where>
            recsts = '1' and type = '2'
            <if test="agency_id != null and agency_id != ''">
                and agency_id = #{agency_id}
            </if>
            <if test="imei_no != null and imei_no != ''">
                and imei_nos like concat('%', #{imei_no}, '%')
            </if>
        </where>
    </select>
    <select id="getInImeiInfo" resultType="iemi_turnover">
        select id, type, product_name, imei_nos, agency_id, (select aname from agency a where a.aid = agency_id) agency_name,
        (select city from bs_city where id = (select agency_city from agency a where a.aid = agency_id)) agency_city,
        crtuser, crtdate  from iemi_turnover
        <where>
            recsts = '1' and type = '1'
            <if test="agency_id != null and agency_id != ''">
                and agency_id = #{agency_id}
            </if>
            <if test="imei_no != null and imei_no != ''">
                and imei_nos like concat('%', #{imei_no}, '%')
            </if>
        </where>
    </select>

    <select id="getTurnover" resultType="int">
        select count(*) from imei where imei_no in <foreach collection="imei_nos" item="imeo_no" open="(" close=")" separator=",">#{imeo_no}</foreach>
    </select>

    <select id="getTurnoverHasId" resultType="iemi">
        select imei_no from imei where imei_no in <foreach collection="imei_nos" item="imeo_no" open="(" close=")" separator=",">#{imeo_no}</foreach>
        and  (select concat(',', imei_nos, ',') from iemi_turnover where id = #{id}) not like concat('%,', imei_no, ',%')
    </select>

    <select id="imeiIsOutput" resultType="map">
        select GROUP_CONCAT(imei_nos SEPARATOR ',') imei_nos from iemi_turnover
        where id in <foreach collection="ids" item="id" open="(" close=")" separator=",">#{id}</foreach>
    </select>

    <select id="queryCountByIemiNo" resultType="int">
        select count(*) from iemi_turnover where concat(',', imei_nos, ',') like concat(',%', #{no}, '%,') and type = '2'
    </select>

    <select id="getImeiNoCount" resultType="int">
        SELECT count(*) from imei where imei_no = #{imei_no}
    </select>

    <select id="getCurrBackBook" resultType="book">
        select bid, repaytotal, book_no, phone, name from cus_book where repaydate =  DATE_SUB(CURDATE(),INTERVAL -1 DAY) and state = '1'
    </select>

    <insert id="addCusLink" parameterType="cusLink" useGeneratedKeys="true" keyProperty="lid" keyColumn="lid">
        INSERT INTO cus_link(lname, lsex, lrelation, lphone, lmemo, crtuser, crtdate,  recsts)
        VALUES (#{lname}, #{lsex}, #{lrelation}, #{lphone}, #{lmemo}, #{crtuser}, now(), '1')
    </insert>

    <insert id="addAccessory" parameterType="accessory">
        INSERT INTO accessory(identity_front, identity_reverse, identity_inhand, work_card, student_card, staff_photo,
        bank_card, taobao_address, zhifb_zmf, imei, contract_photo, operation_video, memo_one, memo_two, crtuser, crtdate, recsts)
        VALUES (#{identity_front}, #{identity_reverse}, #{identity_inhand}, #{work_card}, #{student_card}, #{staff_photo},
        #{bank_card}, #{taobao_address}, #{zhifb_zmf}, #{imei}, #{contract_photo}, #{operation_video}, #{memo_one}, #{memo_two}, #{crtuser}, now(), '1')
    </insert>

    <insert id="addBook" parameterType="book">
        INSERT INTO cus_book(name, phone, book_no, sex, birth, ethnic, `identity`, place,
        familyphone, koseki, nowaddress, company, income, consume, weixin, phoneserviceno, qq, email, memo,
        bankcard, bankaddress, family_linkone, family_linkone_sex, family_linkone_relation, family_linkone_phone,
        family_linkone_address, family_linktwo, family_linktwo_sex, family_linktwo_relation, family_linktwo_phone,
        family_linktwo_address, link_ids, product_name, product_imei, product_price, leaseterm, despositrate, desposit,
        monthrentrate, monthrent, accessory_id, state, agency_id, audit_state, repaydate, expectfee, repaylssue,
        taobao_loginno, taobao_password, zhifubao_loginno, zhifubao_password, xuexin_loginno, xuexin_password,
        crtuser, crtdate, recsts)
        VALUES (#{name}, #{phone}, #{book_no}, #{sex}, #{birth}, #{ethnic}, #{identity}, #{place},
        #{familyphone}, #{koseki}, #{nowaddress}, #{company}, #{income}, #{consume}, #{weixin}, #{phoneserviceno}, #{qq}, #{email}, #{memo},
        #{bankcard}, #{bankaddress}, #{family_linkone}, #{family_linkone_sex}, #{family_linkone_relation}, #{family_linkone_phone},
        #{family_linkone_address}, #{family_linktwo}, #{family_linktwo_sex}, #{family_linktwo_relation}, #{family_linktwo_phone},
        #{family_linktwo_address}, #{link_ids}, #{product_name}, #{product_imei}, #{product_price}, #{leaseterm}, #{despositrate}, #{desposit},
        #{monthrentrate}, #{monthrent}, #{accessory_id}, '4', #{agency_id}, '1', #{repaydate}, #{expectfee}, #{repaylssue},
        #{taobao_loginno}, #{taobao_password}, #{zhifubao_loginno}, #{zhifubao_password}, #{xuexin_loginno}, #{xuexin_password},
        #{crtuser}, now(), '1')
    </insert>

    <insert id="insertErrBookMsg">
        insert into book_errorinfo(book_no, errmsg) VALUES (#{book_no}, #{errmsg})
    </insert>

    <insert id="insertBookFeeOperLog">
        insert into oper_book(type, bid, operdesc, crtuser) VALUES (#{type}, #{bid}, #{desc}, #{user_no})
    </insert>

    <insert id="addImeiInfo" parameterType="iemi">
        insert into imei(state, imei_no, product_name, crtuser, crtdate, recsts) VALUES ('1', #{imei_no}, #{product_name}, #{crtuser}, now(), '1')
    </insert>

    <insert id="saveImeiInfo" parameterType="iemi_turnover">
        INSERT INTO iemi_turnover(type, product_name, imei_nos, agency_id, crtuser, crtdate)
        VALUES ('2', #{product_name}, #{imei_nos}, #{agency_id}, #{crtuser}, now())
    </insert>

    <insert id="insertSmsLog">
        INSERT INTO sms_log (bid, state, msg, crtdate) VALUES (#{bid}, #{state}, #{con}, now())
    </insert>

    <resultMap id="bookInfo" type="book">
        <id column="bid" property="bid"></id>
        <result column="type" property="type"></result>
        <result column="name" property="name"></result>
        <result column="phone" property="phone"></result>
        <result column="book_no" property="book_no"></result>
        <result column="sex" property="sex"></result>
        <result column="birth" property="birth"></result>
        <result column="ethnic" property="ethnic"></result>
        <result column="identity" property="identity"></result>
        <result column="place" property="place"></result>
        <result column="familyphone" property="familyphone"></result>
        <result column="koseki" property="koseki"></result>
        <result column="nowaddress" property="nowaddress"></result>
        <result column="company" property="company"></result>
        <result column="income" property="income"></result>
        <result column="consume" property="consume"></result>
        <result column="weixin" property="weixin"></result>
        <result column="repaytotal" property="repaytotal"></result>
        <result column="totalexpectfee" property="totalexpectfee"></result>
        <result column="reimbursement" property="reimbursement"></result>
        <result column="accessory_id" property="accessory_id"></result>
        <result column="qq" property="qq"></result>
        <result column="phoneserviceno" property="phoneserviceno"></result>
        <result column="email" property="email"></result>
        <result column="memo" property="memo"></result>
        <result column="agency_id" property="agency_id"></result>
        <result column="bankcard" property="bankcard"></result>
        <result column="bankaddress" property="bankaddress"></result>
        <result column="family_linkone" property="family_linkone"></result>
        <result column="family_linkone_address" property="family_linkone_address"></result>
        <result column="family_linkone_phone" property="family_linkone_phone"></result>
        <result column="family_linkone_relation" property="family_linkone_relation"></result>
        <result column="family_linkone_sex" property="family_linkone_sex"></result>
        <result column="family_linktwo" property="family_linktwo"></result>
        <result column="family_linktwo_address" property="family_linktwo_address"></result>
        <result column="family_linktwo_phone" property="family_linktwo_phone"></result>
        <result column="family_linktwo_relation" property="family_linktwo_relation"></result>
        <result column="family_linktwo_sex" property="family_linktwo_sex"></result>
        <result column="product_name" property="product_name"></result>
        <result column="product_imei" property="product_imei"></result>
        <result column="product_price" property="product_price"></result>
        <result column="leaseterm" property="leaseterm"></result>
        <result column="desposit" property="desposit"></result>
        <result column="despositrate" property="despositrate"></result>
        <result column="monthrent" property="monthrent"></result>
        <result column="monthrentrate" property="monthrentrate"></result>
        <result column="audit_state" property="audit_state"></result>
        <result column="audit_state_name" property="audit_state_name"></result>
        <result column="state" property="state"></result>
        <result column="state_name" property="state_name"></result>
        <result column="repaydate" property="repaydate"></result>
        <result column="expectfee" property="expectfee"></result>
        <result column="repaylssue" property="repaylssue"></result>
        <result column="taobao_loginno" property="taobao_loginno"></result>
        <result column="taobao_password" property="taobao_password"></result>
        <result column="zhifubao_loginno" property="zhifubao_loginno"></result>
        <result column="zhifubao_password" property="zhifubao_password"></result>
        <result column="xuexin_loginno" property="xuexin_loginno"></result>
        <result column="xuexin_password" property="xuexin_password"></result>
        <result column="startdate" property="startdate"></result>

        <association property="accessory" javaType="Accessory">
            <id column="yid" property="yid"></id>
            <result column="identity_front" property="identity_front"></result>
            <result column="identity_reverse" property="identity_reverse"></result>
            <result column="identity_inhand" property="identity_inhand"></result>
            <result column="work_card" property="work_card"></result>
            <result column="student_card" property="student_card"></result>
            <result column="staff_photo" property="staff_photo"></result>
            <result column="bank_card" property="bank_card"></result>
            <result column="taobao_address" property="taobao_address"></result>
            <result column="zhifb_zmf" property="zhifb_zmf"></result>
            <result column="imei" property="imei"></result>
            <result column="contract_photo" property="contract_photo"></result>
            <result column="operation_video" property="operation_video"></result>
            <result column="memo_one" property="memo_one"></result>
            <result column="memo_two" property="memo_two"></result>
        </association>

        <collection property="cusLinkList" ofType="CusLink">
            <id column="lid" property="lid"></id>
            <result column="lname" property="lname"></result>
            <result column="lsex" property="lsex"></result>
            <result column="lrelation" property="lrelation"></result>
            <result column="lphone" property="lphone"></result>
            <result column="lmemo" property="lmemo"></result>
        </collection>
    </resultMap>
</mapper>